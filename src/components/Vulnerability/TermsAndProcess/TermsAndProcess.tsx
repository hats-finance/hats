import { useContext, useMemo, useState } from "react";
import { AccordionContext } from "../VulnerabilityAccordion";
import { useTranslation } from "react-i18next";
import { Colors, RC_TOOLTIP_OVERLAY_INNER_STYLE, TERMS_OF_USE } from "../../../constants/constants";
import { ISeverity, IVault, IVaultDescription } from "../../../types/types";
import { calculateRewardPrice, formatNumber } from "../../../utils";
import Tooltip from "rc-tooltip";
import InfoIcon from "../../../assets/icons/info.icon";
import NFTMedia from "../../NFTMedia";
import ZoomIcon from "../../../assets/icons/zoom.icon";
import { useSelector } from "react-redux";
import { RootState } from "../../../reducers";
import Modal from "../../Shared/Modal";
import NFTPrize from "../../NFTPrize";
import QuestionIcon from "../../../assets/icons/question-icon.svg";
import ErrosIcon from "../../../assets/icons/error-icon.svg";
import TimelineIcon from "../../../assets/icons/timeline-icon.svg";
import BugIcon from "../../../assets/icons/bug-icon.svg";
import RewardIcon from "../../../assets/icons/reward-icon.svg";
import { Card, IVulnerabilityData } from "../types";
import "./index.scss";

interface IProps {
  cards: IVulnerabilityData
}

export default function TermsAndProcess({ cards }: IProps) {
  const { submitCard } = useContext(AccordionContext);
  const [acceptedTermsOfUse, setAcceptedTermsOfUse] = useState(cards.terms.verified);
  const [showNFTModal, setShowNFTModal] = useState(false);
  const [modalNFTData, setModalNFTData] = useState<ISeverity | null>(null);
  const { t } = useTranslation();

  const projectId = cards.project.projectId;
  const vault = useSelector((state: RootState) => state.dataReducer.vaults!.filter((vault: IVault) => vault.id === projectId)[0]);
  const description = vault && vault.description;
  const { tokenPrices } = useSelector((state: RootState) => state.dataReducer)

  const prizes = useMemo(() => (description as IVaultDescription)?.severities?.map((severity: ISeverity, index: number) => {
    const rewardPercentage = (Number(vault.rewardsLevels[severity.index]) / 10000) * 100;
    const tokenPrice = tokenPrices?.[vault.stakingToken]?.['usd'];
    const rewardPrice = tokenPrice ? calculateRewardPrice(rewardPercentage, tokenPrice, vault.honeyPotBalance, vault.stakingTokenDecimals) : 0;

    return (
      <tr key={index} className={`${severity.name.toLocaleLowerCase().split(' ').join('-')}`}>
        <td>{severity.name.toUpperCase()}</td>
        <td className="total-vault-wrapper">
          <b>{`${rewardPercentage.toFixed(2)}%`}</b> of vault &#8776; {`$${formatNumber(rewardPrice)}`}&nbsp;
          <Tooltip
            overlay="Prizes are in correlation to the funds in the vault and may change at any time"
            overlayClassName="tooltip"
            overlayInnerStyle={RC_TOOLTIP_OVERLAY_INNER_STYLE}>
            <span><InfoIcon width="15" height="15" fill={Colors.white} /></span>
          </Tooltip>
        </td>
        <td className="nft-wrapper" onClick={() => { setShowNFTModal(true); setModalNFTData(severity); }}>
          <NFTMedia link={severity?.["nft-metadata"]?.image} width="50px" />
          <ZoomIcon />
        </td>
      </tr>
    )
  }), [vault, description, tokenPrices]);

  return (
    <div className="terms-and-process-wrapper">
      <div>{t("SubmitVulnerability.TermsAndProcess.pre-submission")}</div>

      <div className="section-title submission">1 {t("SubmitVulnerability.TermsAndProcess.submission-sub-title")}</div>
      <div className="section-content submission">{t("SubmitVulnerability.TermsAndProcess.submission")}</div>

      <div className="section-title fix">2 {t("SubmitVulnerability.TermsAndProcess.fix-sub-title")}</div>
      <div className="section-content fix">
        {t("SubmitVulnerability.TermsAndProcess.fix")}
        <div className="icon-text-wrapper">
          <img src={QuestionIcon} alt="question icon" />
          {t("SubmitVulnerability.TermsAndProcess.fix-question")}
        </div>

        <div className="icon-text-wrapper">
          <img src={ErrosIcon} alt="error icon" />
          {t("SubmitVulnerability.TermsAndProcess.fix-error")}
        </div>

        {t("SubmitVulnerability.TermsAndProcess.fix-text-1")}

        <div className="icon-text-wrapper">
          <img src={TimelineIcon} alt="timeline icon" />
          {t("SubmitVulnerability.TermsAndProcess.fix-timeline")}
        </div>

        <div className="icon-text-wrapper">
          <img src={BugIcon} alt="bugs icon" />
          {t("SubmitVulnerability.TermsAndProcess.fix-bugs")}
        </div>

        <div className="icon-text-wrapper">
          <img src={RewardIcon} alt="rewards icon" />
          {t("SubmitVulnerability.TermsAndProcess.fix-rewards")}
        </div>
      </div>

      <div className="section-title awards">3 {t("SubmitVulnerability.TermsAndProcess.awards-sub-title")}</div>
      <div className="section-content awards">
        {t("SubmitVulnerability.TermsAndProcess.awards-text-1")}
        {cards.project.verified ? (
          <table>
            <tbody>
              <tr>
                <th>Level</th>
                <th>Prize</th>
                <th>NFT</th>
              </tr>
              {prizes}
            </tbody>
          </table>) : "Please choose project to view prizes"}
        {t("SubmitVulnerability.TermsAndProcess.awards-text-2")}
      </div>

      <div className="warning-notice">{t("SubmitVulnerability.TermsAndProcess.warning-notice")}</div>

      <div className="accept-terms-wrapper">
        <div className="checkbox-container">
          <input type="checkbox" checked={acceptedTermsOfUse} onChange={() => setAcceptedTermsOfUse(!acceptedTermsOfUse)} />
          <label>I UNDERSTAND AND AGREE TO THE <u><a target="_blank" rel="noopener noreferrer" href={TERMS_OF_USE}>TERMS OF USE</a></u></label>
        </div>
        <button disabled={!acceptedTermsOfUse} onClick={() => submitCard(Card.terms, Card.submission)}>NEXT</button>
      </div>
      {
        showNFTModal &&
        <Modal title="NFT PRIZE" setShowModal={setShowNFTModal} maxWidth="600px" width="60%" height="fit-content">
          <NFTPrize data={modalNFTData as any} />
        </Modal>
      }
    </div>
  )
}

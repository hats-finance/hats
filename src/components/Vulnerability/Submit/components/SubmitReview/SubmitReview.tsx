
import { useContext, useState } from "react";
import { useTranslation } from "react-i18next";
import { useDispatch, useSelector } from "react-redux";
import { toggleNotification, toggleSubmittingVulnerability } from "../../../../../actions";
import { createTransaction, submitVulnerability } from "../../../../../actions/contractsActions";
import { DEFAULT_ERROR_MESSAGE, NotificationType } from "../../../../../constants/constants";
import { IVault } from "../../../../../types/types";
import { RootState } from "../../../../../reducers";
import { isProviderAndNetwork } from "../../../../../utils";
import { AccordionContext } from "../../../VulnerabilityAccordion";
import { NETWORK } from "../../../../../settings";
import Loading from "../../../../Shared/Loading";
import { onChainTransactionSuccess } from "../../Submit";
import sha256 from "sha256";
import EditIcon from "../../../../../assets/icons/edit.svg";
import store from "../../../../../store/index";
import { Card, IVulnerabilityData } from "../../../types";
import "./index.scss";

const openpgp = require("openpgp");

interface IProps {
  cards: IVulnerabilityData
  setBotStatus: Function
}

export default function SubmitReview({ cards, setBotStatus }: IProps) {
  const dispatch = useDispatch();
  const { t } = useTranslation();
  const [pendingWalletAction, setPendingWalletAction] = useState(false);
  const { submitCard, toggleCard } = useContext(AccordionContext);
  const isVerified = cards.project.verified && cards.contact.verified && cards.description.verified && cards.terms.verified;
  const vault: IVault = useSelector((state: RootState) => state.dataReducer.vaults.filter((vault: IVault) => vault.id === cards.project.projectId)[0]);
  const description = vault && (vault.isGuest ? vault.parentDescription : vault.description);
  const committeeCheckedIn = vault && vault.parentVault.committeeCheckedIn;
  const submittingVulnerability = useSelector((state: RootState) => state.layoutReducer.submittingVulnerability);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);
  const showSubmitWarning = !isVerified || !isProviderAndNetwork(provider);

  const submit = async () => {
    dispatch(toggleSubmittingVulnerability(true));
    setPendingWalletAction(true);
    const encryptedData = await pgpData();
    const route = vault.name
    const telegramBotUrl = `${description?.["communication-channel"]?.["committee-bot"]}`;
    const sha256Encrypted = sha256(encryptedData.replace(/\s+/g, ''));

    try {
      await createTransaction(
        async () => await submitVulnerability(vault.parentVault.master.address, sha256Encrypted),
        () => { setPendingWalletAction(false); },
        async () => {
          onChainTransactionSuccess(submitCard, telegramBotUrl, encryptedData, store.getState().layoutReducer.transactionHash, route, setBotStatus, dispatch);
        },
        () => { setPendingWalletAction(false); },
        dispatch,
        t("SubmitVulnerability.Submit.on-chain-transaction-success"), 2);
    } catch (err: any) {
      console.error(err);
      dispatch(toggleNotification(true, NotificationType.Error, err?.message ?? DEFAULT_ERROR_MESSAGE, true));
    }
    dispatch(toggleSubmittingVulnerability(false));
  }

  const pgpData = async () => {
    const dataToEncrypt = `
    Project Name: ${cards.project.projectName}
    Title: ${cards.description.title}
    Description: ${cards.description.description}
    Telegram username: ${cards.contact.username}
    Beneficiary: ${cards.contact.beneficiary}
    `
    const publicKeyArmored = `${description?.["communication-channel"]?.["pgp-pk"]}`;
    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });
    const encrypted = await openpgp.encrypt({
      message: await openpgp.createMessage({ text: dataToEncrypt }),
      encryptionKeys: publicKey
    });

    return encrypted;
  }

  return (
    <div className="submit-review-wrapper">
      {t("SubmitVulnerability.Submit.review-notice")}

      <div className="review-details-container">
        <div className="project-and-contact-container">
          <div className="review-item project-name-item">
            <div className="item-title-container">
              <span>Project Name:</span>
              <img src={EditIcon} alt="edit" onClick={() => toggleCard(Card.project)} />
            </div>
            <span className="item-value">{cards.project.projectName}</span>
          </div>
          <div className="review-item">
            <div className="item-title-container">
              <span>Contact Information:</span>
              <img src={EditIcon} alt="edit" onClick={() => toggleCard(Card.contact)} />
            </div>
            <span className="item-value">{cards.contact.username}</span>
          </div>
        </div>

        <div className="description-container">
          <div className="review-item">
            <div className="item-title-container">
              <span>Vulnerability Description:</span>
              <img src={EditIcon} alt="edit" onClick={() => toggleCard(Card.description)} />
            </div>
            <span className="item-value">{cards.description.description}</span>
          </div>
        </div>
      </div>

      <button disabled={!isVerified || submittingVulnerability || !isProviderAndNetwork(provider) || (vault && !committeeCheckedIn)} onClick={submit}>SUBMIT</button>
      {vault && !committeeCheckedIn && <span className="error-label">COMMITTEE IS NOT CHECKED IN YET!</span>}
      {showSubmitWarning && <span className="error-label">{`Please make sure you completed all steps and your wallet is connected to ${NETWORK}`}</span>}
      {(pendingWalletAction || submittingVulnerability) && <Loading fixed extraText="Submitting might take longer than usual" domElement={document.getElementById("accrodionWrapper") as HTMLElement} zIndex={0} />}
    </div>
  )
}

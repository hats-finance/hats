import { useContext, useState } from "react";
import { useSelector } from "react-redux";
import { RootState } from "../../reducers";
import SearchIcon from "../../assets/icons/search.icon";
import { IVault } from "../../types/types";
import { formatWei, ipfsTransformUri } from "../../utils";
import Loading from "../Shared/Loading";
import { AccordionContext } from "./VulnerabilityAccordion";
import { ScreenSize } from "../../constants/constants";
import { Card, IProjectData } from "./types";
import "../../styles/Vulnerability/ProjectSelect.scss";

interface IProps {
  data: IProjectData
}

export default function ProjectSelect({ data }: IProps) {
  const [userInput, setUserInput] = useState("");
  const vaultsData = useSelector((state: RootState) => state.dataReducer.vaults);
  const { submitCard } = useContext(AccordionContext);
  const screenSize = useSelector((state: RootState) => state.layoutReducer.screenSize);

  const vaults = vaultsData.map((vault: IVault, index: number) => {
    const projectName = vault.name;
    if (projectName?.toLowerCase().includes(userInput.toLowerCase()) && !vault.parentVault.liquidityPool && vault.parentVault.registered) {
      return (
        <tr key={index} className={data.projectId === vault.id ? " project-row selected" : "project-row"} onClick={() => submitCard(Card.project, Card.contact, {
          projectName: projectName,
          projectId: vault.id
        })}>
          {/* TODO: handle project-metadata and Project-metadata */}
          <td className="project-name-wrapper"><img className="project-logo" src={ipfsTransformUri(vault.description?.["project-metadata"]?.icon ?? vault.description?.["Project-metadata"]?.icon)} alt="project logo" />{projectName}</td>
          <td>{formatWei(vault.parentVault.honeyPotBalance, 3, vault.parentVault.stakingTokenDecimals)}</td>
        </tr>
      )
    }
    return undefined;
  })

  return <div className="project-select-wrapper">
    {vaults.length === 0 ? <Loading /> :
      <>
        <div className="search-wrapper">
          <SearchIcon />
          <input type="text" placeholder="Search or select project" onChange={(e) => setUserInput(e.target.value)} />
        </div>

        {vaults.every((value: any) => value === undefined) ?
          <div className="no-results">No projects found</div> :
          <div className="table-wrapper">
            <table>
              <tbody>
                {screenSize === ScreenSize.Desktop && (
                  <tr>
                    <th>PROJECT NAME</th>
                    <th>VAULT TOTAL</th>
                  </tr>
                )}
                {vaults}
              </tbody>
            </table>
          </div>}
      </>}
  </div>
}

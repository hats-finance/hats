import React, { useState } from "react";
import { useSelector } from "react-redux";
import { RootState } from "../../reducers";
import SearchIcon from "../../assets/icons/search.icon";
import { IVault } from "../../types/types";
import { fromWei } from "../../utils";
import millify from "millify";
import "../../styles/Vulnerability/ProjectSelect.scss";
import Loading from "../Shared/Loading";
import { AccordionContext } from "./VulnerabilityAccordion";

interface IProps {
  data: {
    projectId: string
  }
}

export default function ProjectSelect(props: IProps) {
  const [userInput, setUserInput] = useState("");
  const vaultsData = useSelector((state: RootState) => state.dataReducer.vaults);
  const { submitCard } = React.useContext(AccordionContext);

  const vaults = vaultsData.map((vault: IVault, index: number) => {
    if (vault.name.toLowerCase().includes(userInput.toLowerCase()) && !vault.liquidityPool && vault.registered) {
      const description = JSON.parse(vault.description as any);
      return (
        <tr key={index} className={props.data.projectId === vault.id ? " project-row selected" : "project-row"} onClick={() => submitCard(1, {
          projectName: vault.name,
          projectId: vault.id,
          masterAddress: vault.master.address,
          description: description,
          rewardsLevels: vault.rewardsLevels,
          totalStaking: vault.totalStaking,
          tokenPrice: vault.tokenPrice,
          honeyPotBalance: vault.honeyPotBalance
        })}>
          <td className="project-name-wrapper"><img className="project-logo" src={description["Project-metadata"].icon} alt="project logo" /> {vault.name}</td>
          <td>{millify(Number(fromWei(vault.totalStaking)))}</td>
        </tr>
      )
    }
    return undefined;
  })

  return <div className="project-select-wrapper">
    {vaults.length === 0 ? <Loading /> :
      <>
        <div className="search-wrapper">
          <SearchIcon />
          <input type="text" placeholder="Search project or select form list" onChange={(e) => setUserInput(e.target.value)} />
        </div>

        {vaults.every((value: any) => value === undefined) ? <div className="no-results">No projects found</div> : <table>
          <tbody>
            <tr>
              <th>Project name</th>
              <th>Vault</th>
            </tr>
            {vaults}
          </tbody>
        </table>}
      </>}
  </div>
}
